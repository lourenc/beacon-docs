(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),s=n(7),o=(n(0),n(213)),i={title:"Getting Started"},r={unversionedId:"wallet/getting-started",id:"wallet/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"First, you need to install the beacon-sdk package.",source:"@site/docs/wallet/getting-started.mdx",slug:"/wallet/getting-started",permalink:"/wallet/getting-started",editUrl:"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/wallet/getting-started.mdx",version:"current",sidebar:"wallet",next:{title:"Security",permalink:"/wallet/security"}},c=[],l={toc:c};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"First, you need to install the ",Object(o.b)("inlineCode",{parentName:"p"},"beacon-sdk")," package."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"npm install --save @airgap/beacon-sdk")),Object(o.b)("p",null,"After that you need to import the Beacon SDK in your code and initialize the WalletClient."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"beacon-sdk")," will automatically try to establish a connection and listen to all Beacon messages."),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The RPC URL that is provided by the DApp can be an insecure http:// connection. The reason for this is because it allows for easy development with a local node, without setting up a local SSL certificate."),Object(o.b)("p",{parentName:"div"},"Especially the wallet should care about this and potentially show a warning to the user if the RPC URL is not a secure https:// URL."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import {\n  WalletClient,\n  BeaconMessageType,\n  PermissionScope,\n  PermissionResponseInput,\n} from "@airgap/beacon-sdk";\n\nconst connectApp = async (): Promise<void> => {\n  const client = new WalletClient({ name: "My Wallet" });\n  await client.init(); // Establish P2P connection\n\n  client\n    .connect(async (message) => {\n      console.log("beacon message", message);\n\n      // Let\'s assume it\'s a permission request, but we obviously need to handle all request types\n      if (message.type === BeaconMessageType.PermissionRequest) {\n        // Here we would show a UI to the user where he can confirm everything that has been requested in the beacon message\n\n        // We hardcode a response\n        const response: PermissionResponseInput = {\n          type: BeaconMessageType.PermissionResponse,\n          network: message.network, // Use the same network that the user requested\n          scopes: [PermissionScope.OPERATION_REQUEST], // Ignore the scopes that have been requested and instead give only operation permissions\n          id: message.id,\n          publicKey: "tezos public key",\n        };\n\n        await client.respond(response);\n      } else {\n        // Handle all other requests\n      }\n    })\n    .catch((error) => console.error("connect error", error));\n};\n\nconnectApp().catch((error) => console.error("connect error", error));\n')))}p.isMDXComponent=!0}}]);